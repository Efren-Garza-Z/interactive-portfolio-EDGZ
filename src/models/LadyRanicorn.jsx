/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Felix Yadomi (https://sketchfab.com/felixyadomi)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/lady-rainicorn-5018632802374fce9e335585afa8310f
Title: Lady Rainicorn
*/

import scene from "../assets/3d/lady_rainicorn.glb";

import React, { useRef, useState } from 'react'
import { useGLTF  } from '@react-three/drei'
import { useFrame, useThree } from "@react-three/fiber";

export function LadyRanicorn({
         position,
         scale,
         isRotating,
         ...props}) {
    const { nodes, materials } = useGLTF(scene)
    const [targetX, setTargetX] = useState(position[0]);
    const ref = useRef();
    // Dirección de orientación: 1 = mirando a la derecha, -1 = mirando a la izquierda
    const [direction, setDirection] = useState(1);

    useFrame(() => {
        if (!ref.current || !isRotating) return;

        // Movimiento horizontal suave
        ref.current.position.x += (targetX - ref.current.position.x) * 0.002;

        // Simular onda vertical
        ref.current.position.y = 0.2 * Math.sin(ref.current.position.x * Math.PI)
            + 0.05 * Math.sin(ref.current.position.x * Math.PI * 0.5); // retroceso suave

        // Simular vaivén sutil en Z
        ref.current.position.z = 0.1 * Math.sin(ref.current.position.x * Math.PI * 2); // mucho más pequeño

        // Calcular orientación real hacia targetX
        const deltaX = targetX - ref.current.position.x;
        const angleY = deltaX >= 0 ? Math.PI : 0; // mirar hacia el objetivo
        ref.current.rotation.y += (angleY - ref.current.rotation.y) * 1; // interpolación suave

        // Cuando llega al target, invertir el objetivo
        if (Math.abs(ref.current.position.x - targetX) < 0.6) {
            setTargetX(prev => (prev > 0 ? -2 : 2));
        }
    });
    return (
        <group ref={ref} position={[position[0], position[1], position[2]]} scale={scale} dispose={null}>
            <mesh castShadow receiveShadow geometry={nodes.Object_4.geometry} material={materials.horn} />
            <mesh castShadow receiveShadow geometry={nodes.Object_6.geometry} material={materials.hair} />
            <mesh castShadow receiveShadow geometry={nodes.Object_7.geometry} material={materials.hair} />
            <mesh castShadow receiveShadow geometry={nodes.Object_8.geometry} material={materials.hair} />
            <mesh castShadow receiveShadow geometry={nodes.Object_9.geometry} material={materials.hair} />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Object_11.geometry}
                material={materials.skin}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Object_13.geometry}
                material={materials.sdsd}
                position={[2.442, 0.132, -0.013]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={3.949}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Object_15.geometry}
                material={materials.body}
                position={[-0.162, -0.318, 0.008]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Object_17.geometry}
                material={materials.arms}
                position={[-1.074, -0.029, 0.092]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Object_19.geometry}
                material={materials.arms}
                position={[-1.036, -0.061, -0.073]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Object_21.geometry}
                material={materials.arms}
                position={[0.541, -0.797, 0.09]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Object_23.geometry}
                material={materials.arms}
                position={[0.519, -0.783, -0.083]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Object_25.geometry}
                material={materials.hair}
                position={[0.809, -0.641, -0.003]}
            />
        </group>
    )
}

useGLTF.preload('/lady_rainicorn.glb')
